# TinyProjDSL v6.0 - LLM-Native Project Documentation Language

**Built on how LLMs actually process information. Clear patterns, natural hierarchy, token-efficient.**

## Design Principles
- **Natural patterns** LLMs already understand
- **Self-describing** structure eliminates ambiguity  
- **Progressive detail** - start simple, add complexity only when needed
- **Token-efficient** through smart abbreviations, not symbols
- **Complete** coverage of all project aspects

---

## 1. CORE STRUCTURE - Hierarchical Key-Value

```
PROJECT shop
  TYPE ecommerce webapp
  STACK ts5 next14 node20
  DATA postgres redis
  
  WORKING billing-service
    TASK implement-subscriptions  
    ISSUE stripe-webhook-timeout
    FILES src/billing/* 
```

**Why this works:**
- LLMs naturally parse indentation
- Keywords are self-documenting
- No special characters to misinterpret
- 40% fewer tokens than JSON/YAML

---

## 2. SMART ABBREVIATIONS (LLM-Friendly)

```
Common tech stack (auto-expanded by LLM):
ts5      → TypeScript 5.x
py3      → Python 3.x  
node20   → Node.js v20
next14   → Next.js 14
react18  → React 18
pg15     → PostgreSQL 15
k8s      → Kubernetes

Metrics shortcuts:
cov85    → 85% coverage
p99-50   → p99 latency 50ms
rps5k    → 5000 req/sec
cpu45    → 45% CPU usage
```

---

## 3. COMPLETE PROJECT TEMPLATE

```
PROJECT [name]
  TYPE [category] [platform]
  VER [version] [status]
  STACK [language] [framework] [runtime]
  
  ARCH [pattern]
    API [protocol] [auth]
    DATA [primary] [cache] [queue]
    DEPLOY [platform] [config]
  
  WORKING [module/feature]
    TASK [description]
    BRANCH [name] FROM [base]
    FILES [pattern]
    ISSUE [description]
    BLOCKED_BY [dependency]
  
  CODE
    STRUCTURE
      src/
        api/ → REST endpoints
        services/ → business logic
        models/ → data models
        utils/ → helpers
    ENTRY src/index.ts
    BUILD npm run build
    TEST npm test
    RUN npm start
    
  DEPS
    PROD express4 stripe12 zod3
    DEV jest29 eslint8 prettier3
    
  API
    POST /api/users {name email password} → {id token}
    GET /api/users/:id → {id name email created}
    PUT /api/users/:id {name? email?} → {success}
    
  SCHEMA
    users {
      id uuid pk
      email string unique
      name string
      created timestamp
    }
    
  ENV
    REQUIRED DATABASE_URL STRIPE_KEY
    OPTIONAL LOG_LEVEL=info PORT=3000
    
  TEST
    UNIT cov85 pass142 fail0
    INT cov65 pass23 fail2
    E2E pass8 fail1 skip2
    
  PERF
    LOAD rps5k p99-50 cpu45 mem2gb
    SCALE horizontal 1-10 pods
    
  DOCS
    README docs/README.md
    API docs/api.yaml → OpenAPI
    SETUP docs/setup.md
```

---

## 4. MINIMAL → STANDARD → COMPLETE PROFILES

### MINIMAL (20 tokens) - Quick handoff
```
PROJECT shop TYPE web STACK ts5 next14
WORKING billing TASK add-stripe
```

### STANDARD (50 tokens) - Session transfer
```
PROJECT shop TYPE ecommerce web VER 2.1 prod
STACK ts5 next14 node20
DATA pg15 redis7
WORKING billing 
  TASK stripe-subscriptions
  FILES src/billing/*
  ISSUE webhook-timeout-5s
TEST unit-cov85 int-cov60
```

### COMPLETE (150 tokens) - Full documentation
```
[Full template from section 3]
```

---

## 5. INTELLIGENT PARSING RULES

```python
# LLM Mental Model for Parsing
def parse_tinyprojdsl_v6(text):
    """
    1. Split by lines
    2. Track indentation level
    3. Build hierarchical structure
    4. Auto-expand abbreviations
    5. Infer missing sections
    """
    
    lines = text.strip().split('\n')
    context = {}
    current_section = None
    current_indent = 0
    
    for line in lines:
        indent = len(line) - len(line.lstrip())
        line = line.strip()
        
        if not line:
            continue
            
        # Parse key-value or section header
        parts = line.split(' ', 1)
        key = parts[0]
        value = parts[1] if len(parts) > 1 else None
        
        # Handle hierarchy
        if indent == 0:
            current_section = key
            context[key] = value or {}
        elif indent > current_indent:
            # Nested under current section
            if isinstance(context[current_section], dict):
                context[current_section][key] = value
            else:
                context[current_section] = {key: value}
        
        current_indent = indent
    
    return expand_abbreviations(context)
```

---

## 6. CODE DOCUMENTATION PATTERNS

### Function Documentation
```
FUNC processPayment
  IN amount:number currency:string token:string
  OUT success:bool transaction_id:string
  THROWS InvalidToken InsufficientFunds
  CALLS stripe.charge database.save
```

### Class Documentation  
```
CLASS UserService
  DEPS database logger
  METHODS
    create(data) → User
    findById(id) → User?
    update(id, data) → bool
    delete(id) → bool
  STATE connection pool
```

### Module Relations
```
MODULES
  auth → PROVIDES authentication middleware
  billing → REQUIRES auth CALLS payment-api
  notifications → LISTENS billing.events
```

---

## 7. SPECIAL SECTIONS FOR COMPLEX PROJECTS

### Microservices
```
SERVICES
  auth-api PORT 3001 TECH node20 express4
  billing-api PORT 3002 TECH py3 fastapi
  gateway PORT 80 TECH nginx
  
COMMUNICATION
  rest → auth billing
  grpc → internal only  
  events → kafka topics
```

### Database
```
DATABASE postgres
  MIGRATIONS 
    001-users → CREATE TABLE users
    002-billing → ADD subscriptions
  SEEDS dev-users test-data
  BACKUP daily s3://backups
```

### CI/CD
```
PIPELINE
  TRIGGER push main pr
  STAGES
    build → docker build
    test → unit int e2e
    scan → security lint
    deploy → k8s prod
```

---

## 8. SMART DEFAULTS & INFERENCE

The LLM automatically infers:
- `node*` implies JavaScript/TypeScript ecosystem
- `PORT` without value defaults to 3000/8080
- `test` without framework implies jest/pytest/go-test
- Missing `VER` implies 1.0.0
- No `STATUS` implies development

---

## 9. ERROR HANDLING & VALIDATION

```
ERRORS
  current → stripe-timeout redis-connection
  resolved → auth-loop data-migration
  
WARNINGS
  deprecated-api-v1
  slow-query-users-list
  
MONITORS
  sentry → project-id
  datadog → dashboard-link
```

---

## 10. USAGE EXAMPLES

### Quick Bug Report
```
PROJECT shop WORKING billing
BUG stripe-webhook-timeout
  WHEN processing subscription
  FILE src/webhooks.ts:45
  ERROR timeout after 5s
  LOG request-id-abc123
```

### API Documentation
```
PROJECT api TYPE rest
API
  AUTH bearer-token
  BASE https://api.shop.com/v2
  
  POST /users
    IN {email name password}
    OUT {id token}
    ERROR 400:validation 409:exists
    
  GET /users/:id
    OUT {id email name created}
    ERROR 404:not-found
```

### Full Handoff
```
PROJECT shop TYPE saas VER 3.2.1 staging
STACK ts5 next14 node20
TEAM billing-team OWNER john@company

ARCH clean
  API rest jwt
  DATA pg15 redis7 s3
  DEPLOY k8s helm
  
WORKING payment-processing
  TASK implement-3ds-authentication  
  PR 456 FROM feature/3ds INTO main
  FILES 
    src/billing/threeds/*
    tests/billing/threeds.test.ts
  ISSUE some-cards-fail-validation
  NEEDS security-review qa-signoff
  
CODE  
  STRUCTURE standard-nextjs
  ENTRY src/index.ts  
  BUILD npm run build:prod
  TEST npm run test:all
  
DEPS
  CRITICAL stripe12 @security
  PROD next14 react18 postgres
  DEV jest typescript eslint
  
TEST
  UNIT cov92 pass:all
  API cov78 fail:2
  E2E running...
  
NEXT  
  deploy-to-staging
  security-audit
  performance-testing
```

---

*TinyProjDSL v6.0 - Natural patterns. Complete coverage. LLM-native.*